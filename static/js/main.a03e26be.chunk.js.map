{"version":3,"sources":["components/Navigation/MajorNav/MajorNav.module.css","components/Navigation/MinorNav/MinorNav.module.css","components/UI/Button/Button.module.css","components/FontCards/FontCards.module.css","components/UI/Input/Input.module.css","components/UI/Spinner/Spinner.module.css","components/FontCards/FontCard/FontCard.module.css","components/UI/Spinner/Spinner.js","components/Navigation/MinorNav/MinorNav.js","components/UI/Input/Input.js","hoc/Aux/Aux.js","components/UI/Button/Button.js","components/Navigation/MajorNav/MajorNav.js","components/FontCards/FontCard/FontCard.js","components/FontCards/FontCards.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","spinner","className","classes","Loader","minorNavbar","props","MinorNavbar","Logo","href","input","inputElement","inputtype","type","InputElement","bordertype","join","Radio","htmlFor","id","label","Input","aux","children","button","Button","btnType","onClick","clicked","MajorNav","Aux","placeholder","onChange","this","search","maxLength","changed","value","text","SelectStyle","fontSize","activeColor","changeFontSize","ButtonGroup","colorMode","listMode","icon","size","color","reset","MajorNavSmall","PureComponent","fontcard","cardWidth","listCard","FontCard","Helmet","link","Header","Title","font","Plus","Text","style","fontFamily","FontCards","cardCollection","fonts","map","index","push","key","family","displayState","library","add","faCaretUp","faCaretDown","faListUl","faRedoAlt","faPlusCircle","waitTime","App","state","loadedFonts","links","loadIndex","resetFonts","resetText","loading","searching","downloadFonts","axios","get","then","res","data","items","fetchedFonts","i","length","apiURL","replace","rel","fontLinks","setState","resetLinks","catch","error","console","log","loadMoreFontsToDOM","num","scrollHandler","debounce","lastElement","document","querySelector","lastElementOffset","offsetTop","clientHeight","window","pageYOffset","innerHeight","textChangedHandler","event","target","searchHandler","searchResults","count","filter","lc","toLowerCase","includes","colorModeHandler","listModeHandler","fontSizeHandler","resetHandler","scrollToTop","scrollTo","prevProps","prevState","scrollListener","addEventListener","e","fontCards","Spinner","MinorNav","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oHACAA,EAAOC,QAAU,CAAC,SAAW,2BAA2B,cAAgB,gCAAgC,YAAc,8BAA8B,MAAQ,wBAAwB,MAAQ,wBAAwB,YAAc,gC,mBCAlOD,EAAOC,QAAU,CAAC,KAAO,yB,mBCAzBD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,MAAQ,sBAAsB,MAAQ,wB,mBCAtHD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,aAAe,gCAAgC,cAAgB,mC,kBCA1HD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,aAAe,4BAA4B,MAAQ,qBAAqB,SAAW,wBAAwB,YAAc,6B,mBCAxKD,EAAOC,QAAU,CAAC,OAAS,wBAAwB,MAAQ,yB,sDCA3DD,EAAOC,QAAU,CAAC,SAAW,2BAA2B,OAAS,yBAAyB,MAAQ,wBAAwB,KAAO,uBAAuB,KAAO,uBAAuB,aAAe,+BAA+B,cAAgB,kC,mNCOrOC,EAJC,kBACZ,yBAAKC,UAAWC,IAAQC,QAAxB,e,iBCaWC,EAdK,SAACC,GAAD,OAClB,4BAAQJ,UAAWC,IAAQI,aACzB,6BACE,uBAAGL,UAAWC,IAAQK,KAAMC,KAAK,KAAI,0CAArC,UACA,4BACE,4BAAI,uBAAGA,KAAK,KAAR,YACJ,4BAAI,uBAAGA,KAAK,KAAR,aACJ,4BAAI,uBAAGA,KAAK,KAAR,aACJ,4BAAI,uBAAGA,KAAK,KAAR,c,yCCkBGC,EA1BD,SAACJ,GACb,IAAIK,EAAe,KAEnB,OAAQL,EAAMM,WACZ,IAAM,OACJD,EAAe,yCAAOE,KAAK,OAAOX,UAAW,CAACC,IAAQW,aAAcX,IAAQG,EAAMS,aAAaC,KAAK,MAAUV,IAC9G,MACF,IAAM,QACJK,EACE,yBAAKT,UAAWC,IAAQc,OACtB,yCAAOJ,KAAK,QAAQX,UAAWC,IAAQW,cAAkBR,IACzD,2BAAOY,QAASZ,EAAMa,IAAI,8BAAOb,EAAMc,SAG3C,MACF,QACET,EAAe,yCAAOE,KAAK,OAAOX,UAAW,CAACC,IAAQW,aAAcX,IAAQG,EAAMS,aAAaC,KAAK,MAAUV,IAGlH,OACE,yBAAKJ,UAAWC,IAAQkB,OACrBV,ICvBQW,EAFH,SAAChB,GAAD,OAAWA,EAAMiB,U,iBCUdC,EANA,SAAClB,GAAD,OACX,4BACIJ,UAAW,CAACC,IAAQsB,OAAQtB,IAAQG,EAAMoB,UAAUV,KAAK,KACzDW,QAASrB,EAAMsB,SAAUtB,EAAMiB,WC0CxBM,E,iLArCX,OACE,kBAACC,EAAD,KACE,yBAAK5B,UAAWC,IAAQ0B,UAEtB,kBAACR,EAAD,CAAOT,UAAU,OAAOmB,YAAY,YAAYC,SAAUC,KAAK3B,MAAM4B,OAAQnB,WAAW,WAAWoB,UAAU,OAE7G,kBAACd,EAAD,CAAOT,UAAU,OAAOmB,YAAY,wBAAwBC,SAAUC,KAAK3B,MAAM8B,QAASC,MAAOJ,KAAK3B,MAAMgC,KAAMvB,WAAW,cAAcoB,UAAU,QAErJ,yBAAKjC,UAAWC,IAAQoC,aACtB,4BAAQF,MAAOJ,KAAK3B,MAAMkC,SAAUtC,UAAW+B,KAAK3B,MAAMmC,YAAaT,SAAUC,KAAK3B,MAAMoC,gBAC3F,4BAAQxC,UAAW+B,KAAK3B,MAAMmC,YAAaJ,MAAM,QAAjD,QACA,4BAAQnC,UAAW+B,KAAK3B,MAAMmC,YAAaJ,MAAM,QAAjD,QACA,4BAAQnC,UAAW+B,KAAK3B,MAAMmC,YAAaJ,MAAM,QAAjD,QACA,4BAAQnC,UAAW+B,KAAK3B,MAAMmC,YAAaJ,MAAM,QAAjD,UAIH,yBAAKnC,UAAWC,IAAQwC,aACtB,kBAAClB,EAAD,CAAQC,QAASO,KAAK3B,MAAMmC,YAAab,QAASK,KAAK3B,MAAMsC,aAG/D,kBAACnB,EAAD,CAAQG,QAASK,KAAK3B,MAAMuC,UAAU,kBAAC,IAAD,CAAiBC,KAAK,UAAUC,KAAK,KAAKC,MAAkC,UAA3Bf,KAAK3B,MAAMmC,YAA0B,QAAU,WAEtI,kBAAChB,EAAD,CAAQG,QAASK,KAAK3B,MAAM2C,OAAO,kBAAC,IAAD,CAAiBH,KAAK,WAAWC,KAAK,KAAKC,MAAkC,UAA3Bf,KAAK3B,MAAMmC,YAA0B,QAAU,YAGtI,yBAAKvC,UAAWC,IAAQ+C,eAEtB,kBAAC7B,EAAD,CAAOT,UAAU,OAAOmB,YAAY,YAAYC,SAAUC,KAAK3B,MAAM4B,OAAQnB,WAAW,WAAWoB,UAAU,OAE7G,kBAACV,EAAD,CAAQG,QAASK,KAAK3B,MAAM2C,OAAO,kBAAC,IAAD,CAAiBH,KAAK,WAAWC,KAAK,KAAKC,MAAkC,UAA3Bf,KAAK3B,MAAMmC,YAA0B,QAAU,iB,GAlCvHU,iB,yCCsBRC,EAxBE,SAAC9C,GAEhB,IACI+C,EAAY,KAOhB,OALEA,EADkB,iBAFF/C,EAAMgD,SAGV,gBAEA,eAIZ,yBAAKnC,GAAIb,EAAMa,GAAIjB,UAAW,CAACC,IAAQoD,SAAUpD,IAAQkD,IAAYrC,KAAK,MACxE,kBAACwC,EAAA,OAAD,KACGlD,EAAMmD,MAET,yBAAKvD,UAAWC,IAAQuD,QACtB,yBAAKxD,UAAWC,IAAQwD,OAAQrD,EAAMsD,MACtC,yBAAK1D,UAAWC,IAAQ0D,MAAM,kBAAC,IAAD,CAAiBf,KAAK,cAAcC,KAAK,KAAKC,MAAM,cAEpF,uBAAG9C,UAAWC,IAAQ2D,KAAMC,MAAO,CAACC,WAAY1D,EAAMsD,KAAMpB,SAAUlC,EAAMkC,WAAYlC,EAAMgC,QCGrF2B,E,iLArBA,IAAD,OACJC,EAAiB,GAYrB,OAXAjC,KAAK3B,MAAM6D,MAAMC,KAAI,SAACR,EAAMS,GAC1B,OAAOH,EAAeI,KAClB,kBAACf,EAAD,CACIgB,IAAKX,EAAKzC,GACVyC,KAAMA,EAAKY,OACXf,KAAMG,EAAKH,KACXjB,SAAU,EAAKlC,MAAMkC,SACrBF,KAAM,EAAKhC,MAAMgC,KACjBgB,SAAU,EAAKhD,MAAMmE,mBAI3B,yBAAKvE,UAAW,CAACC,IAAQ8D,UAAW9D,IAAQ8B,KAAK3B,MAAMmE,eAAezD,KAAK,MAC1EkD,O,GAjBaf,iB,iCCUxBuB,IAAQC,IAAIC,IAAWC,IAAaC,IAAUC,IAAWC,KAGzD,IAAMC,EAAW,IA+MFC,E,2MA1MbC,MAAQ,CACN7C,KAAM,mCACN6B,MAAO,GACPiB,YAAa,GACbC,MAAO,GACPC,UAAW,EACX1C,UAAW,QACXC,SAAU,eACVL,SAAU,OACV+C,WAAY,GACZC,UAAW,GACXC,SAAS,EACTC,WAAW,G,EAuBbC,cAAgB,WACdC,IAAMC,IAAI,+GACPC,MAAK,SAAAC,GAGJ,IAFA,IAAIC,EAAOD,EAAIC,KAAKC,MACdC,EAAe,GACZC,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,IAC/BD,EAAa5B,KAAK,CAChBE,OAAQwB,EAAKG,GAAG3B,OAChBrD,GAAIgF,EACJE,OAAQ,2CAA6CL,EAAKG,GAAG3B,OAAO8B,QAAQ,KAAM,KAClF7C,KAAM,0BAAM8C,IAAI,aAAa9F,KAAM,2CAA6CuF,EAAKG,GAAG3B,OAAO8B,QAAQ,KAAM,KAAM/B,IAAK,CAAC4B,OAM7H,IAFA,IAAIf,EAAc,GAETe,EAAI,EAAGA,EADN,GACeA,IACvBf,EAAYd,KAAK,CACfE,OAAQwB,EAAKG,GAAG3B,OAChBrD,GAAIgF,EACJE,OAAQ,2CAA6CL,EAAKG,GAAG3B,OAAO8B,QAAQ,KAAM,KAClF7C,KAAM,0BAAM8C,IAAI,aAAa9F,KAAM,2CAA6CuF,EAAKG,GAAG3B,OAAO8B,QAAQ,KAAM,KAAM/B,IAAK,CAAC4B,OAK7H,IADA,IAAMK,EAAY,GACTL,EAAI,EAAGA,EAAI,GAAIA,IACtBK,EAAUlC,KAAK4B,EAAaC,GAAG1C,MAGjC,EAAKgD,SAAS,CACZtC,MAAO+B,EACPd,YAAaA,EACbG,WAAYH,EACZsB,WAAYF,EACZlB,UApBQ,GAqBRD,MAAOmB,EACPf,SAAS,OACVkB,OAAM,SAAUC,GACjBC,QAAQC,IAAIF,O,EAKlBG,mBAAqB,WAKnB,IAJA,IAAI5C,EAAK,YAAO,EAAKgB,MAAMhB,OACvBiB,EAAW,YAAO,EAAKD,MAAMC,aAC7BC,EAAK,YAAO,EAAKF,MAAME,OACvB2B,EAAM,EAAK7B,MAAMG,UAAY,GACxBa,EAAI,EAAKhB,MAAMG,UAAWa,EAAIa,EAAKb,IAC1Cf,EAAYd,KAAKH,EAAMgC,IACvBd,EAAMf,KAAKH,EAAMgC,GAAG1C,MAEtB,EAAKgD,SAAS,CAACrB,YAAaA,EAAaC,MAAOA,EAAOC,UAAW0B,K,EAGpEC,cAAgBC,KAAS,WACvB,IAAIC,EAAcC,SAASC,cAAc,2CACrCC,EAAoBH,EAAYI,UAAYJ,EAAYK,aAC3CC,OAAOC,YAAcD,OAAOE,YAE5BL,IAAsB,EAAKnC,MAAMO,WAChD,EAAKqB,uBAEN9B,G,EAEH2C,mBAAqB,SAACC,GAClB,EAAKpB,SAAU,CACbnE,KAAMuF,EAAMC,OAAOzF,MACnBmD,UAAWqC,EAAMC,OAAOzF,S,EAI9B0F,cAAgB,SAACF,GACf,IACIG,EAAgB,GAChBtC,EAAY,KACZuC,EAAQ,EAEe,KAAvBJ,EAAMC,OAAOzF,OACfqD,GAAY,EAGZsC,EADe,EAAK7C,MAAMhB,MACG+D,QAAO,SAAAtE,GAClC,IAAMuE,EAAKvE,EAAKY,OAAO4D,cACjBF,EAASL,EAAMC,OAAOzF,MAAM+F,cAClC,OAAOD,EAAGE,SAASH,IAAWD,IAAU,QAG1CD,EAAgB,EAAK7C,MAAMI,WAC3BG,GAAY,GAEd,EAAKe,SAAS,CACZrB,YAAa4C,EACbtC,UAAWA,K,EAIf4C,iBAAmB,WACY,UAAzB,EAAKnD,MAAMvC,UACb,EAAK6D,SAAS,CAAE7D,UAAW,UAE3B,EAAK6D,SAAS,CAAE7D,UAAW,W,EAI/B2F,gBAAkB,WACY,iBAAxB,EAAKpD,MAAMtC,SACb,EAAK4D,SAAS,CAAE5D,SAAU,iBAE1B,EAAK4D,SAAS,CAAE5D,SAAU,mB,EAI9B2F,gBAAkB,SAACX,GACjB,EAAKpB,SAAS,CAACjE,SAAUqF,EAAMC,OAAOzF,S,EAGxCoG,aAAe,WACb,EAAKhC,SAAS,CACZnE,KAAM,mCACNkD,UAAW,GACXJ,YAAa,EAAKD,MAAMI,WACxBF,MAAO,EAAKF,MAAMuB,WAClB9D,UAAW,QACX0C,UAAW,GACXzC,SAAU,eACV6C,WAAW,K,EAIfgD,YAAc,WACZjB,OAAOkB,SAAS,EAAG,I,mFAtJnB1G,KAAK0D,kB,yCAIYiD,EAAWC,GAAY,IAAD,OAEf,KAApB5G,KAAKkD,MAAM7C,MACbL,KAAKwE,SAAU,CACbnE,KAAM,qCAIRL,KAAK6G,eAAiBrB,OAAOsB,iBAAiB,UAAU,SAAAC,GACtD,EAAK/B,cAAc+B,Q,+BA6IvB,IAAIC,EAAY,kBAAC,EAAD,CACZ3G,KAAML,KAAKkD,MAAM7C,KACjB6B,MAAOlC,KAAKkD,MAAMC,YAClB5C,SAAUP,KAAKkD,MAAM3C,SACrBiC,aAAcxC,KAAKkD,MAAMtC,WAM7B,OAJIZ,KAAKkD,MAAMM,UACbwD,EAAY,kBAACC,EAAD,OAIZ,yBAAKhJ,UAAoC,UAAzB+B,KAAKkD,MAAMvC,UAAwB,QAAU,SAC3D,kBAACuG,EAAD,MACA,kBAAC,EAAD,CACI7G,KAAML,KAAKkD,MAAMK,UACjBpD,QAASH,KAAK2F,mBACd1F,OAAQD,KAAK8F,cACbnF,UAAWX,KAAKqG,iBAChB7F,YAAaR,KAAKkD,MAAMvC,UACxBC,SAAUZ,KAAKsG,gBACf7F,eAAgBT,KAAKuG,gBACrBhG,SAAUP,KAAKkD,MAAM3C,SACrBS,MAAOhB,KAAKwG,eACfQ,EACD,kBAACxH,EAAD,CAAQG,QAASK,KAAKyG,YAAahH,QAAQ,SAA3C,OACA,4BAAQxB,UAAU,UAAS,0F,GAtMjBkJ,aCTEC,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStC,SAASuC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhE,MAAK,SAAAiE,GACjCA,EAAaC,kB","file":"static/js/main.a03e26be.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"MajorNav\":\"MajorNav_MajorNav__1rBWn\",\"MajorNavSmall\":\"MajorNav_MajorNavSmall__a_keo\",\"SelectStyle\":\"MajorNav_SelectStyle__1zmb6\",\"white\":\"MajorNav_white__kkhbK\",\"black\":\"MajorNav_black__NnAOt\",\"ButtonGroup\":\"MajorNav_ButtonGroup__Xk__u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"MinorNav_Logo__10Jky\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3gFiX\",\"white\":\"Button_white__2zszu\",\"black\":\"Button_black__NmN0u\",\"toTop\":\"Button_toTop__1auhP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FontCards\":\"FontCards_FontCards__1HsFF\",\"FontCardFlex\":\"FontCards_FontCardFlex__2i5dX\",\"FontCardBlock\":\"FontCards_FontCardBlock__2XTeL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"InputElement\":\"Input_InputElement__2m88K\",\"Radio\":\"Input_Radio__KqCeM\",\"NoBorder\":\"Input_NoBorder__14Ou2\",\"RightBorder\":\"Input_RightBorder__2PcGg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner_Loader__1twK-\",\"load3\":\"Spinner_load3__3VkKK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FontCard\":\"FontCard_FontCard__2H941\",\"Header\":\"FontCard_Header__OqJTP\",\"Title\":\"FontCard_Title__3iSCB\",\"Plus\":\"FontCard_Plus__1K76Q\",\"Text\":\"FontCard_Text__razuQ\",\"CardWidth250\":\"FontCard_CardWidth250__1K_ut\",\"CardWidthFull\":\"FontCard_CardWidthFull__6DHA8\"};","import React from 'react';\n\nimport classes from './Spinner.module.css';\n\nconst spinner = () => (\n    <div className={classes.Loader}>Loading...</div>\n);\n\nexport default spinner;\n","import React from 'react';\n\nimport classes from './MinorNav.module.css';\n\nconst minorNavbar = (props) => (\n  <header className={classes.MinorNavbar}>\n    <nav>\n      <a className={classes.Logo} href=\"#\"><strong>Google</strong> Fonts</a>\n      <ul>\n        <li><a href=\"#\">Catalog</a></li>\n        <li><a href=\"#\">Featured</a></li>\n        <li><a href=\"#\">Articles</a></li>\n        <li><a href=\"#\">About</a></li>\n      </ul>\n    </nav>\n  </header>\n);\n\nexport default minorNavbar;\n","import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = (props) => {\n  let inputElement = null;\n\n  switch (props.inputtype) {\n    case ('text'):\n      inputElement = <input type=\"text\" className={[classes.InputElement, classes[props.bordertype]].join(' ')} {...props} />;\n      break;\n    case ('radio'):\n      inputElement = (\n        <div className={classes.Radio}>\n          <input type=\"radio\" className={classes.InputElement} {...props} />\n          <label htmlFor={props.id}><span>{props.label}</span></label>\n        </div>\n      );\n      break;\n    default:\n      inputElement = <input type=\"text\" className={[classes.InputElement, classes[props.bordertype]].join(' ')} {...props} />;\n  }\n\n  return (\n    <div className={classes.Input}>\n      {inputElement}\n    </div>\n  );\n}\n\nexport default input;\n","const aux = (props) => props.children;\n\nexport default aux;\n","import React from 'react';\n\nimport classes from './Button.module.css';\n\nconst button = (props) => (\n    <button\n        className={[classes.Button, classes[props.btnType]].join(' ')}\n        onClick={props.clicked}>{props.children}</button>\n);\n\nexport default button;\n","import React, {PureComponent} from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport classes from './MajorNav.module.css';\nimport Input from '../../UI/Input/Input';\nimport Aux from '../../../hoc/Aux/Aux';\nimport Button from '../../UI/Button/Button';\n\nclass MajorNav extends PureComponent {\n\n  render () {\n\n    return (\n      <Aux>\n        <div className={classes.MajorNav}>\n\n          <Input inputtype=\"text\" placeholder=\"Search...\" onChange={this.props.search} bordertype=\"NoBorder\" maxLength=\"50\" />\n\n          <Input inputtype=\"text\" placeholder=\"Testing fonts here...\" onChange={this.props.changed} value={this.props.text} bordertype=\"RightBorder\" maxLength=\"120\"/>\n\n          <div className={classes.SelectStyle}>\n            <select value={this.props.fontSize} className={this.props.activeColor} onChange={this.props.changeFontSize}>\n             <option className={this.props.activeColor} value=\"12px\">12px</option>\n             <option className={this.props.activeColor} value=\"18px\">18px</option>\n             <option className={this.props.activeColor} value=\"24px\">24px</option>\n             <option className={this.props.activeColor} value=\"32px\">32px</option>\n            </select>\n          </div>\n\n          <div className={classes.ButtonGroup}>\n            <Button btnType={this.props.activeColor} clicked={this.props.colorMode} />\n          </div>\n\n          <Button clicked={this.props.listMode}><FontAwesomeIcon icon=\"list-ul\" size=\"lg\" color={this.props.activeColor === \"white\" ? \"black\" : \"white\"}/></Button>\n\n          <Button clicked={this.props.reset}><FontAwesomeIcon icon=\"redo-alt\" size=\"lg\" color={this.props.activeColor === \"white\" ? \"black\" : \"white\"}/></Button>\n        </div>\n\n        <div className={classes.MajorNavSmall}>\n\n          <Input inputtype=\"text\" placeholder=\"Search...\" onChange={this.props.search} bordertype=\"NoBorder\" maxLength=\"50\" />\n\n          <Button clicked={this.props.reset}><FontAwesomeIcon icon=\"redo-alt\" size=\"lg\" color={this.props.activeColor === \"white\" ? \"black\" : \"white\"}/></Button>\n        </div>\n      </Aux>\n    );\n  }\n}\n\nexport default MajorNav;\n","import React from 'react';\nimport { Helmet } from \"react-helmet\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport classes from './FontCard.module.css';\n\nconst fontcard = (props) => {\n\n  let widthToggle = props.listCard;\n  let cardWidth = null;\n  if (widthToggle !== \"FontCardFlex\") {\n    cardWidth = \"CardWidthFull\";\n  } else {\n    cardWidth = \"CardWidth250\";\n  }\n\n  return (\n    <div id={props.id} className={[classes.FontCard, classes[cardWidth]].join(' ')}>\n      <Helmet>\n        {props.link}\n      </Helmet>\n      <div className={classes.Header}>\n        <div className={classes.Title}>{props.font}</div>\n        <div className={classes.Plus}><FontAwesomeIcon icon=\"plus-circle\" size=\"lg\" color=\"#40B0FF\"/></div>\n      </div>\n      <p className={classes.Text} style={{fontFamily: props.font, fontSize: props.fontSize}}>{props.text}</p>\n    </div>\n  );\n}\n\nexport default fontcard;\n","import React, { PureComponent } from 'react';\n\nimport classes from './FontCards.module.css';\nimport FontCard from './FontCard/FontCard';\n\nclass FontCards extends PureComponent {\n\n    render () {\n      let cardCollection = [];\n      this.props.fonts.map((font, index) => {\n        return cardCollection.push(\n            <FontCard\n                key={font.id}\n                font={font.family}\n                link={font.link}\n                fontSize={this.props.fontSize}\n                text={this.props.text}\n                listCard={this.props.displayState}/>)\n      });\n\n      return (\n          <div className={[classes.FontCards, classes[this.props.displayState]].join(' ')}>\n          {cardCollection}\n          </div>\n      );\n  }\n}\n\nexport default FontCards;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport './App.css';\nimport Spinner from './components/UI/Spinner/Spinner';\nimport MinorNavbar from './components/Navigation/MinorNav/MinorNav';\nimport MajorNav from './components/Navigation/MajorNav/MajorNav';\nimport FontCards from './components/FontCards/FontCards';\nimport debounce from 'lodash.debounce';\nimport Button from './components/UI/Button/Button';\n\n// Importing Font Awesome and creating a library of icons\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faCaretUp, faCaretDown, faListUl, faRedoAlt, faPlusCircle } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faCaretUp, faCaretDown, faListUl, faRedoAlt, faPlusCircle)\n\n// initializing wait time for loadash debounce (this will be used for an onScroll event)\nconst waitTime = 200;\n\n\nclass App extends Component {\n\n  state = {\n    text: \"This is small, they're far away!\", // Initializes visible text on cards\n    fonts: [], // Stores all fonts retrieved from Google Fonts API call\n    loadedFonts: [], // Stores all fonts to be loaded to the DOM\n    links: [], // Stores all the <link /> tags to be loaded to the <head /> tag\n    loadIndex: 0, // Initializes where to start mapping fonts into loadedFonts\n    colorMode: \"white\", // Initialize color mode\n    listMode: \"FontCardFlex\", // Initialize list display mode\n    fontSize: \"24px\", // Initialize font size\n    resetFonts: [], // Stores font reset data\n    resetText: \"\",  // Stores text reset data\n    loading: true, // Set to true for spinner\n    searching: false // Set to false so on scroll event will load more fonts\n  }\n\n  // When component mounts, Axios get request is sent to Google Fonts API\n  componentDidMount() {\n    this.downloadFonts();\n  }\n\n\n  componentDidUpdate(prevProps, prevState) {\n    // Checks if the font text input is empty and resets it if it is\n    if (this.state.text === \"\") {\n      this.setState( {\n        text: \"This is small, they're far away!\"\n      });\n    }\n    // triggers onScroll event\n      this.scrollListener = window.addEventListener(\"scroll\", e => {\n        this.scrollHandler(e);\n      });\n  }\n\n  // This function is triggered in componentDidMount - loads fonts using axios\n  downloadFonts = () => {\n    axios.get('https://www.googleapis.com/webfonts/v1/webfonts?sort=popularity&key=AIzaSyBG-FePB1VPnmYo3LzVMx-k7Ap0UkzTLJs')\n      .then(res => {\n        let data = res.data.items;\n        const fetchedFonts = [];\n        for (let i = 0; i < data.length; i++) {\n          fetchedFonts.push({\n            family: data[i].family,\n            id: i,\n            apiURL: 'https://fonts.googleapis.com/css?family=' + data[i].family.replace(/ /g, '+'),\n            link: <link rel=\"stylesheet\" href={'https://fonts.googleapis.com/css?family=' + data[i].family.replace(/ /g, '+')} key={[i]} />\n          });\n        }\n\n        let loadedFonts = [];\n        let num = 36;\n        for (let i = 0; i < num; i++) {\n          loadedFonts.push({\n            family: data[i].family,\n            id: i,\n            apiURL: 'https://fonts.googleapis.com/css?family=' + data[i].family.replace(/ /g, '+'),\n            link: <link rel=\"stylesheet\" href={'https://fonts.googleapis.com/css?family=' + data[i].family.replace(/ /g, '+')} key={[i]} />\n          });\n        }\n\n        const fontLinks = [];\n        for (let i = 0; i < 36; i++) {\n          fontLinks.push(fetchedFonts[i].link);\n        }\n\n        this.setState({\n          fonts: fetchedFonts,\n          loadedFonts: loadedFonts,\n          resetFonts: loadedFonts,\n          resetLinks: fontLinks,\n          loadIndex: num,\n          links: fontLinks,\n          loading: false});\n      }).catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  // Used with the onScroll event to load more fonts to the DOM\n  loadMoreFontsToDOM = () => {\n    let fonts = [...this.state.fonts];\n    let loadedFonts = [...this.state.loadedFonts];\n    let links = [...this.state.links];\n    let num = this.state.loadIndex + 36;\n    for (let i = this.state.loadIndex; i < num; i++) {\n      loadedFonts.push(fonts[i]);\n      links.push(fonts[i].link);\n    }\n    this.setState({loadedFonts: loadedFonts, links: links, loadIndex: num});\n  }\n\n  scrollHandler = debounce(() => {\n    let lastElement = document.querySelector(\"div.FontCard_FontCard__2H941:last-child\");\n    let lastElementOffset = lastElement.offsetTop + lastElement.clientHeight;\n    let pageOffset = window.pageYOffset + window.innerHeight;\n\n    if (pageOffset > lastElementOffset && !this.state.searching) {\n      this.loadMoreFontsToDOM();\n    }\n  }, waitTime);\n\n  textChangedHandler = (event) => {\n      this.setState( {\n        text: event.target.value,\n        resetText: event.target.value\n      })\n  }\n\n  searchHandler = (event) => {\n    let currentFonts = [];\n    let searchResults = [];\n    let searching = null;\n    let count = 0;\n\n    if (event.target.value !== \"\") {\n      searching = true;\n\n      currentFonts = this.state.fonts;\n      searchResults = currentFonts.filter(font => {\n        const lc = font.family.toLowerCase();\n        const filter = event.target.value.toLowerCase();\n        return lc.includes(filter) && count++ < 36;\n      });\n    } else {\n      searchResults = this.state.resetFonts;\n      searching = false;\n    }\n    this.setState({\n      loadedFonts: searchResults,\n      searching: searching\n    });\n  }\n\n  colorModeHandler = () => {\n    if (this.state.colorMode !== \"black\") {\n      this.setState({ colorMode: \"black\" });\n    } else {\n      this.setState({ colorMode: \"white\" });\n    }\n  }\n\n  listModeHandler = () => {\n    if (this.state.listMode !== \"FontCardFlex\") {\n      this.setState({ listMode: \"FontCardFlex\" });\n    } else {\n      this.setState({ listMode: \"FontCardBlock\" });\n    }\n  }\n\n  fontSizeHandler = (event) => {\n    this.setState({fontSize: event.target.value})\n  }\n\n  resetHandler = () => {\n    this.setState({\n      text: \"This is small, they're far away!\",\n      resetText: \"\",\n      loadedFonts: this.state.resetFonts,\n      links: this.state.resetLinks,\n      colorMode: \"white\",\n      loadIndex: 36,\n      listMode: \"FontCardFlex\",\n      searching: false\n    });\n  }\n\n  scrollToTop = () => {\n    window.scrollTo(0, 0);\n  }\n\n  render () {\n    let fontCards = <FontCards\n        text={this.state.text}\n        fonts={this.state.loadedFonts}\n        fontSize={this.state.fontSize}\n        displayState={this.state.listMode}/>;\n\n    if (this.state.loading) {\n      fontCards = <Spinner />;\n    }\n\n    return (\n      <div className={this.state.colorMode === \"black\" ? \"black\" : \"white\"}>\n        <MinorNavbar />\n        <MajorNav\n            text={this.state.resetText}\n            changed={this.textChangedHandler}\n            search={this.searchHandler}\n            colorMode={this.colorModeHandler}\n            activeColor={this.state.colorMode}\n            listMode={this.listModeHandler}\n            changeFontSize={this.fontSizeHandler}\n            fontSize={this.state.fontSize}\n            reset={this.resetHandler}/>\n        {fontCards}\n        <Button clicked={this.scrollToTop} btnType=\"toTop\">Top</Button>\n        <footer className=\"footer\"><p>coded by Fintan Maher - chingu pre-work project 2019 </p></footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}